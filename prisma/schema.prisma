generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Service {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  name            String      @unique
  type            TypeService
  description     String
  basePrice       Float
  image           String
  isActive        Boolean
  features        String[]
  stripeProductId String?
  createdAt       DateTime?
  updatedAt       DateTime?
  orderItems      OrderItem[]
}

enum TypeService {
  VITRINE
  ECOMMERCE
  SAAS
  COACHING
}

model User {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  email            String    @unique
  role             UserRole
  firstName        String
  lastName         String
  password         String
  phone            String
  company          String?
  stripeCustomerId String?
  isMailVerified   Boolean?
  createdAt        DateTime?
  updatedAt        DateTime?
  orders           Order[]
}

enum UserRole {
  ADMIN
  USER
  DISABLED
}

model Order {
  id                    String        @id @default(auto()) @map("_id") @db.ObjectId
  statusMain            StatusMain
  statusPayment         StatusPayment
  totalAmount           Float
  depositAmount         Float
  deadlineDate          DateTime?
  stripeSessionId       String?
  stripePaymentIntentId String?
  createdAt             DateTime?
  updatedAt             DateTime?
  userId                String        @db.ObjectId
  user                  User          @relation(fields: [userId], references: [id])
  orderItems            OrderItem[]
}

enum StatusMain {
  NEW
  VALIDATED
  IN_PROGRESS
  COMPLETED
  ARCHIVED
}

enum StatusPayment {
  PENDING_DEPOSIT
  DEPOSIT_PAID
  PENDING_FINAL
  FULLY_PAID
}

model OrderItem {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  unitAmount  Float
  totalAmount Float
  quantity    Int
  createdAt   DateTime?
  updatedAt   DateTime?
  orderId     String    @db.ObjectId
  order       Order     @relation(fields: [orderId], references: [id])
  serviceId   String    @db.ObjectId
  service     Service   @relation(fields: [serviceId], references: [id])
}
